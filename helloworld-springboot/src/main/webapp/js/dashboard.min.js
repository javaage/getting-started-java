angular.module('RDash', ['ui.bootstrap', 'ui.router', 'ngCookies', 'ngTable']);
'use strict';

/**
 * Route configuration for the RDash module.
 */
angular.module('RDash').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {

        // For unmatched routes
        $urlRouterProvider.otherwise('/employee');

        // Application routes
        $stateProvider
            .state('employee', {
                url: '/employee',
                templateUrl: 'templates/employee.html',
                controller: 'EmployeeCtrl'
            }) 
            .state('role', {
                url: '/role',
                templateUrl: 'templates/role.html',
                controller: 'RoleCtrl'
            }) 
            .state('course', {
                url: '/course',
                templateUrl: 'templates/course.html',
                controller: 'CourseCtrl'
            }) 
            .state('sample', {
                url: '/sample',
                templateUrl: 'templates/sample.html',
                controller: 'GoldenSampleCtrl'
            })  
            .state('record', {
                url: '/record',
                templateUrl: 'templates/record.html',
                controller: 'RecordCtrl'
            })        
            // .state('index', {
            //     url: '/',
            //     templateUrl: 'templates/dashboard.html'
            // })
            // .state('tables', {
            //     url: '/tables',
            //     templateUrl: 'templates/tables.html'
            // })
            ;
    }
]);
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '=?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};

/**
 * Widget Footer Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('RDash')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .constant('app.constants',{
    	environments: {
	        PRO: 'PRO',
	        UAT: 'UAT',
	        SIT: 'SIT',
	        MOCK: 'MOCK'
    	}
    });
        angular
        .module('RDash')
        .provider('app.environments', ['app.constants', function (constants) {
            function getMock() {
                return {
                    environment: 'MOCK',
                    services: {
                        customService: {
                            serviceName: 'customService',
                            identifier: 'http://192.168.120.128:8080'
                        }
                    }
                };
            }
            function getPRO() {
                return {
                    environment: 'PRO',
                    services: {
                        customService: {
                            serviceName: 'customService',
                            identifier: '/'
                        }
                    }
                };
            }
            // config object
            var config = {
                environment: '',
                services: {}
            };
            var _basicUrls = {
                getUser: '/api/user/{0}',
                getUserList: '/api/user/list',
                deleteUser: '/api/user/{0}',
                addUser: '/api/user',
                updateUser: '/api/user',
                getRole: '/api/role/{0}',
                getRoleList: '/api/role/list',
                deleteRole: '/api/role/{0}',
                addRole: '/api/role',
                updateRole: '/api/role',
                getRecord: '/api/record/{0}',
                getRecordList: '/api/record/list',
                deleteRecord: '/api/record/{0}',
                addRecord: '/api/record',
                updateRecord: '/api/record',
                getCourse: '/api/course/{0}',
                getCourseList: '/api/course/list',
                deleteCourse: '/api/course/{0}',
                addCourse: '/api/course',
                updateCourse: '/api/course',
                getGoldenSample: '/api/goldenSample/{0}',
                getGoldenSampleList: '/api/goldenSample/list',
                deleteGoldenSample: '/api/goldenSample/{0}',
                addGoldenSample: '/api/goldenSample',
                updateGoldenSample: '/api/goldenSample'
            };
            function _joinUrl(domain, path) {
                return domain.replace(/(^http.*?)\/{0,}$/, '$1/') + path.replace(/^\/{0,}(.*)/, '$1');
            }
            function _generateURLs(identifier, urls) {
                var newUrls = angular.extend({}, urls);

                angular.forEach(newUrls, function (v, k) {
                    if (typeof v == 'string') {
                        if (!(v.match(/^http/))) {
                            newUrls[k] = _joinUrl(identifier, v);
                        }
                    }
                    else {
                        newUrls[k] = _generateURLs(identifier, v);
                    }
                });
                return newUrls;
            }
            this.setEnvironment = function (environment) {
                if (environment === constants.environments.MOCK) {
                    config = getMock();
                }
                else if (environment === constants.environments.PRO) {
                    config = getPRO();
                }
                if (!config.services.customService.url) {
                    config.services.customService.url = _generateURLs(config.services.customService.identifier, _basicUrls);
                }
                if (!config.services.customService.urlParams) {
                    if (environment === constants.environments.MOCK) {
                        config.services.customService.urlParams = config.services.customService.url;
                    } else {
                        config.services.customService.urlParams = _basicUrls;
                    }
                }
                this.config = config;
            };
            this.$get = function () {
                this.setEnvironment(constants.environments.PRO);
                return config;
            };

        }]);
angular
    .module('RDash')
        .service('app.services', ['$http','$q','app.environments',function ($http,$q,environments) {
        	var url = environments.services.customService.url;

            this.isEmptyOrNull = function (obj) {
                /// <summary>
                /// Retrieve true when object is empty, undefined or null.
                /// </summary>
                /// <param name='obj'>Object to be checked</param>
                /// <returns type='boolean'>True when object is empty, undefined or null.</returns>
                /// <doc>myPerformance.factory:methods#isEmptyOrNull</doc>
                return ((obj === undefined) ||
                    (obj === null) ||
                    (angular.isString(obj) && (obj === '')) ||
                    (angular.isArray(obj) && (obj.length === 0)) // Arrays
                );
            };

            this.urlFormat = function () {
                /// <summary>
                /// Format url using string.format way to match parameters.
                /// </summary>
                /// <returns type='string'>String parsed.</returns>
                /// <doc>myPerformance.factory:methods#urlFormat</doc>
                var args = arguments, url = '', baseUrl = '', qs = '', qsFormatted = '', splitted, vars = [], hash, i;
                if (this.isEmptyOrNull(args)) {
                    return '';
                }
                if (args.length === 1) {
                    url = args[0];
                }
                else {
                    url = args[0].replace(/\{(\d+)\}/g, function (match, number) {
                        return args[parseInt(number, 10) + 1] !== undefined ? encodeURIComponent(args[parseInt(number, 10) + 1]) : '';
                    });
                }
                // Remove empty qs parameters
                if (url.indexOf('?') >= 0) {
                    splitted = url.split('?');
                    baseUrl = splitted[0];
                    if (splitted.length > 1) {
                        qs = splitted[1].split('&');
                        for (i = 0; i < qs.length; i++) {
                            if (qs[i].indexOf('=') >= 0) {
                                hash = qs[i].split('=');
                                vars.push({ code: hash[0], value: hash[1] });
                            }
                            else {
                                vars.push({ code: qs[i], value: '' });
                            }
                        }
                        // Fill qsFormatted using vars and removing empty values
                        for (i = 0; i < vars.length; i++) {
                            if (vars[i].value && vars[i].value !== '') {
                                qsFormatted = qsFormatted + ((qsFormatted === '') ? '?' : '&') + vars[i].code + '=' + vars[i].value;
                            }
                        }
                    }
                }
                else {
                    baseUrl = url;
                }
                return baseUrl + qsFormatted;
            };

            this.getUserList = function(){
                var deferred = $q.defer();
            	$http.get(url.getUserList,{})
            	.success(function(data){
            		console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
            	})
            	.error(function(error){
            		deferred.reject(error);
            	});

                return deferred.promise;
            };

            this.addUser = function(user){
                var deferred = $q.defer();
                $http.post(url.addUser,user)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateUser = function(user){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateUser,user.id);
                $http.put(urlQuery,user)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getRoleList = function(){
                var deferred = $q.defer();
                $http.get(url.getRoleList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addRole = function(role){
                var deferred = $q.defer();
                $http.post(url.addRole,role)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateRole = function(role){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateRole,role.name);
                $http.put(urlQuery,role)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getRecordList = function(){
                var deferred = $q.defer();
                $http.get(url.getRecordList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addRecord = function(record){
                var deferred = $q.defer();
                $http.post(url.addRecord,record)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateRecord = function(record){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateRecord,record.name);
                $http.put(urlQuery,record)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getCourseList = function(){
                var deferred = $q.defer();
                $http.get(url.getCourseList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addCourse = function(course){
                var deferred = $q.defer();
                $http.post(url.addCourse,course)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateCourse = function(course){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateCourse,course.name);
                $http.put(urlQuery,course)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };
            this.getGoldenSampleList = function(){
                var deferred = $q.defer();
                $http.get(url.getGoldenSampleList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addGoldenSample = function(course){
                var deferred = $q.defer();
                $http.post(url.addGoldenSample,course)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateGoldenSample = function(course){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateGoldenSample,course.name);
                $http.put(urlQuery,course)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };
        }]);
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('AlertsCtrl', ['$scope', AlertsCtrl]);

function AlertsCtrl($scope) {
    $scope.alerts = [{
        type: 'success',
        msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
    }, {
        type: 'danger',
        msg: 'Found a bug? Create an issue with as many details as you can.'
    }];

    $scope.addAlert = function() {
        $scope.alerts.push({
            msg: 'Another alert!'
        });
    };

    $scope.closeAlert = function(index) {
        $scope.alerts.splice(index, 1);
    };
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('CourseCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', CourseCtrl])
    .controller('OperateCourseCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateCourseCtrl]);
function CourseCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    $scope.courses = [];

    $('.datepicker').datepicker({
    });



    $scope.cancel = function() {
      $uibModalInstance.dismiss('cancel');
    };

    $scope.getCourseList = function(){
        services.getCourseList().then(function(result) {
            if (result.code == 1) {
                $scope.courses = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active:'desc', courseName: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addCourseModal = function(){
        //var scope = $rootScope.$new();
        $scope.course = {};
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'courseModal.html',
            controller: 'OperateCourseCtrl'
        });
        modalInstance.opened.then(function(){
            $('.datepicker').datepicker({
            });
        });
    };

    $scope.inactiveCourse = function(course){
        course.active = false;
        services.updateCourse(course).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeCourse = function(course){
        course.active = true;
        services.updateCourse(course).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateCourseModal = function(course){
        //var scope = $rootScope.$new();
        $scope.course =course;
        $scope.isModify = true;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'courseModal.html',
            controller: 'OperateCourseCtrl',
        });
    };

    $scope.updateCourse = function(course){
        services.updateCourse(course).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getCourseList();
}

function OperateCourseCtrl($scope, $log,$uibModalInstance, services) { 

    $('.datepicker').datepicker({
    });

    $scope.closeCourseModal = function(){
        $uibModalInstance.dismiss();
    };

    $scope.openStartDate = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.openedStartDate = true;
    };

    $scope.openEndDate = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.openedEndDate = true;
    };

    $scope.submitCourseData = function(){
        	if($scope.isModify){
                services.updateCourse($scope.course).then(function(result) {
                    if (result.code == 1) {
                        $scope.closeCourseModal();
                    }
                }, function (error) {
                    console.log(error);    
                });
            }else{
                services.addCourse($scope.course).then(function(result) {
                    if (result.code == 1) {
                        $scope.getCourseList();
                        $scope.closeCourseModal();
                    }
                }, function (error) {
                    console.log(error);    
                });
            }
    };
    


}
angular
    .module('RDash')
    .controller('EmployeeCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', EmployeeCtrl])
    .controller('OperateUserCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateUserCtrl]);
function EmployeeCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    
    $scope.users = [];
    $scope.roles = [];
    $scope.isIDLegal = false;

    $scope.getRoleList = function(){
        services.getRoleList().then(function(result) {
            if (result.code == 1) {
                $scope.roles = result.data;
            }
        }, function (error) {
            console.log(error);    
        });       
    };

    $scope.getUserList = function(){
        services.getUserList().then(function(result) {
            if (result.code == 1) {
                $scope.users = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active: 'desc', id: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addUserModal = function(){
        //var scope = $rootScope.$new();
        $scope.user = {};
        $scope.user.roleID = '';
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'userModal.html',
            controller: 'OperateUserCtrl',
        });
    };

    $scope.inactiveUser = function(user){
        user.active = false;
        services.updateUser(user).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeUser = function(user){
        user.active = true;
        services.updateUser(user).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateUserModal = function(user){
        //var scope = $rootScope.$new();
        $scope.user =user;
        $scope.isModify = true;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'userModal.html',
            controller: 'OperateUserCtrl',
        });
    };

    $scope.updateUser = function(user){
        services.updateUser(user).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };
    $scope.getRoleList();
    $scope.getUserList();
}

function OperateUserCtrl($scope, $log,$uibModalInstance, services) { 

    $scope.closeUserModal = function(){
        $uibModalInstance.dismiss();
    };

    $scope.submitUserData = function(){
        if($scope.isModify){
            services.updateUser($scope.user).then(function(result) {
                    if (result.code == 1) {
                        $scope.getUserList();
                        $scope.closeUserModal();
                    }
                }, function (error) {
                    console.log(error);    
                });
            }else{
                services.addUser($scope.user).then(function(result) {
                    if (result.code == 1) {
                        $scope.getUserList();
                        $scope.closeUserModal();
                    }
                }, function (error) {
                    console.log(error);    
            });
        }
    };

    
}
/**
 * Master Controller
 */

angular.module('RDash')
    .controller('MasterCtrl', ['$scope', '$cookieStore', MasterCtrl]);

function MasterCtrl($scope, $cookieStore) {
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 992;

    $scope.getWidth = function() {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function(newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = ! $cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }

    });

    $scope.toggleSidebar = function() {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function() {
        $scope.$apply();
    };
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('RecordCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', RecordCtrl])
    .controller('OperateRecordCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateRecordCtrl]);
function RecordCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    $scope.records = [];

    $scope.getRecordList = function(){
        services.getRecordList().then(function(result) {
            if (result.code == 1) {
                $scope.records = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active:'desc', recordName: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addRecordModal = function(){
        //var scope = $rootScope.$new();
        $scope.record = {};
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'recordModal.html',
            controller: 'OperateRecordCtrl',
        });
    };

    $scope.inactiveRecord = function(record){
        record.active = false;
        services.updateRecord(record).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeRecord = function(record){
        record.active = true;
        services.updateRecord(record).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateRecordModal = function(record){
        //var scope = $rootScope.$new();
        $scope.record =record;
        $scope.isModify = true;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'recordModal.html',
            controller: 'OperateRecordCtrl',
        });
    };

    $scope.updateRecord = function(record){
        services.updateRecord(record).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getRecordList();
}

function OperateRecordCtrl($scope, $log,$uibModalInstance, services) { 


    $scope.closeRecordModal = function(){
        $uibModalInstance.dismiss();
    };



    $scope.submitRecordData = function(){
        	if($scope.isModify){
                services.updateRecord($scope.record).then(function(result) {
                    if (result.code == 1) {
                        $scope.closeRecordModal();
                    }
                }, function (error) {
                    console.log(error);    
                });
            }else{
                services.addRecord($scope.record).then(function(result) {
                    if (result.code == 1) {
                        $scope.getRecordList();
                        $scope.closeRecordModal();
                    }
                }, function (error) {
                    console.log(error);    
                });
            }
    };
    
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('RoleCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', RoleCtrl])
    .controller('OperateRoleCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateRoleCtrl]);
function RoleCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    $scope.roles = [];

    $scope.getRoleList = function(){
        services.getRoleList().then(function(result) {
            if (result.code == 1) {
                $scope.roles = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active:'desc', roleName: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addRoleModal = function(){
        //var scope = $rootScope.$new();
        $scope.role = {};
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'roleModal.html',
            controller: 'OperateRoleCtrl',
        });
    };

    $scope.inactiveRole = function(role){
        role.active = false;
        services.updateRole(role).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeRole = function(role){
        role.active = true;
        services.updateRole(role).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateRoleModal = function(role){
        //var scope = $rootScope.$new();
        $scope.role =role;
        $scope.isModify = true;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'roleModal.html',
            controller: 'OperateRoleCtrl',
        });
    };

    $scope.updateRole = function(role){
        services.updateRole(role).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getRoleList();
}

function OperateRoleCtrl($scope, $log,$uibModalInstance, services) { 


    $scope.closeRoleModal = function(){
        $uibModalInstance.dismiss();
    };



    $scope.submitRoleData = function(){
        	if($scope.isModify){
                services.updateRole($scope.role).then(function(result) {
                    if (result.code == 1) {
                        $scope.closeRoleModal();
                    }
                }, function (error) {
                    console.log(error);    
                });
            }else{
                services.addRole($scope.role).then(function(result) {
                    if (result.code == 1) {
                        $scope.getRoleList();
                        $scope.closeRoleModal();
                    }
                }, function (error) {
                    console.log(error);    
                });
            }
    };
    
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('GoldenSampleCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', GoldenSampleCtrl])
    .controller('OperateGoldenSampleCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateGoldenSampleCtrl]);
function GoldenSampleCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    $scope.goldenSamples = [];

    $scope.getGoldenSampleList = function(){
        services.getGoldenSampleList().then(function(result) {
            if (result.code == 1) {
                $scope.goldenSamples = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active:'desc', goldenSampleName: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addGoldenSampleModal = function(){
        //var scope = $rootScope.$new();
        $scope.goldenSample = {};
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'goldenSampleModal.html',
            controller: 'OperateGoldenSampleCtrl',
        });
    };

    $scope.inactiveGoldenSample = function(goldenSample){
        goldenSample.active = false;
        services.updateGoldenSample(goldenSample).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeGoldenSample = function(goldenSample){
        goldenSample.active = true;
        services.updateGoldenSample(goldenSample).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateGoldenSampleModal = function(goldenSample){
        //var scope = $rootScope.$new();
        $scope.goldenSample =goldenSample;
        $scope.isModify = true;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'goldenSampleModal.html',
            controller: 'OperateGoldenSampleCtrl',
        });
    };

    $scope.updateGoldenSample = function(goldenSample){
        services.updateGoldenSample(goldenSample).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getGoldenSampleList();
}

function OperateGoldenSampleCtrl($scope, $log,$uibModalInstance, services) { 


    $scope.closeGoldenSampleModal = function(){
        $uibModalInstance.dismiss();
    };



    $scope.submitGoldenSampleData = function(){
        	if($scope.isModify){
                services.updateGoldenSample($scope.goldenSample).then(function(result) {
                    if (result.code == 1) {
                        $scope.closeGoldenSampleModal();
                    }
                }, function (error) {
                    console.log(error);    
                });
            }else{
                services.addGoldenSample($scope.goldenSample).then(function(result) {
                    if (result.code == 1) {
                        $scope.getGoldenSampleList();
                        $scope.closeGoldenSampleModal();
                    }
                }, function (error) {
                    console.log(error);    
                });
            }
    };
    
}