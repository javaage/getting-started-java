angular.module('RDash', ['ui.bootstrap', 'ui.router', 'ngCookies', 'ngTable', 'ui.select', 'ngSanitize']);//
'use strict';

/**
 * Route configuration for the RDash module.
 */
angular.module('RDash').config(['$stateProvider', '$urlRouterProvider', '$locationProvider',
    function($stateProvider, $urlRouterProvider,$locationProvider) {

        //$locationProvider.html5Mode(true).hashPrefix('!');
        // For unmatched routes
        $urlRouterProvider.otherwise('/employee');

        // Application routes
        $stateProvider
            .state('secure', {
                template: '<div ui-view></div>',
                abstract: true,
                controller: 'AuthCtrl'
                
            })
            .state('login', {
                url: '/login',
                templateUrl: 'templates/login.view.html',
                controller: 'LoginController'
            }) 
            .state('employee', {
                parent: 'secure',
                url: '/employee',
                templateUrl: 'templates/employee.html',
                controller: 'EmployeeCtrl'
            }) 
            .state('role', {
                parent: 'secure',
                url: '/role',
                templateUrl: 'templates/role.html',
                controller: 'RoleCtrl'
            }) 
            .state('flyer', {
                parent: 'secure',
                url: '/flyer',
                templateUrl: 'templates/flyer.html',
                controller: 'FlyerCtrl'
            }) 
            .state('quiz', {
                parent: 'secure',
                url: '/quiz',
                params: {'quiz': null},
                templateUrl: 'templates/quiz.html',
                controller: 'QuizCtrl'
            }) 
            .state('quizList', {
                parent: 'secure',
                url: '/quizList',
                templateUrl: 'templates/quizList.html',
                controller: 'QuizListCtrl'
            }) 
            .state('course', {
                parent: 'secure',
                url: '/course',
                templateUrl: 'templates/course.html',
                controller: 'CourseCtrl'
            }) 
            .state('sample', {
                parent: 'secure',
                url: '/sample',
                templateUrl: 'templates/sample.html',
                controller: 'GoldenSampleCtrl'
            })  
            .state('record', {
                parent: 'secure',
                url: '/record',
                templateUrl: 'templates/record.html',
                controller: 'RecordCtrl'
            })  
            .state('setting', {
                parent: 'secure',
                url: '/setting',
                templateUrl: 'templates/setting.html',
                controller: 'SettingCtrl'
            });
    }
]);
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '=?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};

/**
 * Widget Footer Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('RDash')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .constant('app.constants',{
    	environments: {
	        PRO: 'PRO',
	        UAT: 'UAT',
	        SIT: 'SIT',
	        MOCK: 'MOCK'
    	}
    });
angular
.module('RDash')
.directive('account',  ['$http','$q', '$timeout', 'app.environments','app.services',function($http, $q, $timeout,environments,services) {
  return {
    scope: true,
    require: 'ngModel',
    link: function(scope, elm, attrs, ctrl) {
      var url = environments.services.customService.url;

      ctrl.$asyncValidators.account = function(modelValue, viewValue) {

        if (ctrl.$isEmpty(modelValue) || scope.isModify) {
          return $q.resolve();
        }

        var deferred = $q.defer();
        var urlCheck = services.urlFormat(url.checkUser,modelValue);
        $http.get(urlCheck,{})
            .success(function(data){
                console.log(data);
                if (data.code == 1 && data.data) {
                    deferred.resolve(data);
                } else {
                    deferred.reject(data);
                }
            })
            .error(function(error){
                deferred.reject(error);
            });

        return deferred.promise;
      };
    }
  };
}])
.directive('budgetvalid',  ['$http','$q', '$timeout', 'app.environments','app.services',function($http, $q, $timeout,environments,services) {
  return {
    scope: true,
    require: 'ngModel',
    link: function(scope, elm, attrs, ctrl) {
        scope.$watch(attrs.ngModel,function(value,oldValue){

            if(attrs.ngModel == 'user.budget')
                scope.user.budget = value;
            else if(attrs.ngModel == 'user.balance')
                scope.user.balance = value;

            if(scope.user.budget != null && scope.user.balance != null){
                if(scope.user.balance > scope.user.budget){
                    scope.userForm.budget.$setValidity('budgetvalid', false);
                    scope.userForm.balance.$setValidity('budgetvalid', false);
                }else{
                    scope.userForm.budget.$setValidity('budgetvalid', true);
                    scope.userForm.balance.$setValidity('budgetvalid', true);
                }
            }else{
                scope.userForm.budget.$setValidity('budgetvalid', true);
                scope.userForm.balance.$setValidity('budgetvalid', true);
            }
        });      
    }
  };
}])
;
        angular
        .module('RDash')
        .provider('app.environments', ['app.constants', function (constants) {
            function getMock() {
                return {
                    environment: 'MOCK',
                    services: {
                        customService: {
                            GMT: '+0800',
                            serviceName: 'customService',
                            identifier: '/'
                        }
                    }
                };
            }
            function getPRO() {
                return {
                    environment: 'PRO',
                    services: {
                        customService: {
                            GMT: '+0000',
                            serviceName: 'customService',
                            identifier: '/'
                        }
                    }
                };
            }
            // config object
            var config = {
                environment: '',
                services: {}
            };
            var _basicUrls = {
                getUser: '/api/user/{0}',
                getUserList: '/api/user/list',
                deleteUser: '/api/user/{0}',
                checkUser: '/api/user/check/{0}',
                addUser: '/api/user',
                updateUser: '/api/user',
                getRole: '/api/role/{0}',
                getRoleList: '/api/role/list',
                deleteRole: '/api/role/{0}',
                addRole: '/api/role',
                getFlyer: '/api/flyer/{0}',
                getFlyerList: '/api/flyer/list',
                deleteFlyer: '/api/flyer/{0}',
                addFlyer: '/api/flyer',
                updateFlyer: '/api/flyer',
                updateFlyerOnly: '/api/flyer/only',
                updateRole: '/api/role',
                getQuiz: '/api/quiz/{0}',
                getQuizList: '/api/quiz/list',
                deleteQuiz: '/api/quiz/{0}',
                addQuiz: '/api/quiz',
                updateQuiz: '/api/quiz',
                updateQuizOnly: '/api/quiz/only',
                getQuestionList: 'api/question/list/{0}',
                getRecord: '/api/record/{0}',
                getRecordList: '/api/record/list',
                deleteRecord: '/api/record/{0}',
                addRecord: '/api/record',
                updateRecord: '/api/record',
                getCourse: '/api/course/{0}',
                getCourseList: '/api/course/list',
                deleteCourse: '/api/course/{0}',
                addCourse: '/api/course',
                updateCourse: '/api/course',
                getGoldenSample: '/api/goldenSample/{0}',
                deleteGoldenSampleByID: '/api/goldenSample/{0}',
                getGoldenSampleList: '/api/goldenSample/list',
                deleteGoldenSample: '/api/goldenSample/{0}',
                addGoldenSample: '/api/goldenSample',
                updateGoldenSample: '/api/goldenSample',
                getCourseHistoryListByUserID: '/api/coursehistory/{0}',
                getRoleHistoryListByUserID: '/api/rolehistory/{0}',
                importUsers: '/api/import/users'
            };
            function _joinUrl(domain, path) {
                return domain.replace(/(^http.*?)\/{0,}$/, '$1/') + path.replace(/^\/{0,}(.*)/, '$1');
            }
            function _generateURLs(identifier, urls) {
                var newUrls = angular.extend({}, urls);

                angular.forEach(newUrls, function (v, k) {
                    if (typeof v == 'string') {
                        if (!(v.match(/^http/))) {
                            newUrls[k] = _joinUrl(identifier, v);
                        }
                    }
                    else {
                        newUrls[k] = _generateURLs(identifier, v);
                    }
                });
                return newUrls;
            }
            this.setEnvironment = function (environment) {
                if (environment === constants.environments.MOCK) {
                    config = getMock();
                }
                else if (environment === constants.environments.PRO) {
                    config = getPRO();
                }
                if (!config.services.customService.url) {
                    config.services.customService.url = _generateURLs(config.services.customService.identifier, _basicUrls);
                }
                if (!config.services.customService.urlParams) {
                    if (environment === constants.environments.MOCK) {
                        config.services.customService.urlParams = config.services.customService.url;
                    } else {
                        config.services.customService.urlParams = _basicUrls;
                    }
                }
                this.config = config;
            };
            this.$get = function () {
                this.setEnvironment(constants.environments.PRO);
                // this.setEnvironment(constants.environments.MOCK);
                return config;
            };

        }]);
angular
    .module('RDash')
        .service('app.services', ['$http','$q','app.environments',function ($http,$q,environments) {
        	var url = environments.services.customService.url;

            this.getGMT = function(){
                return environments.services.customService.GMT;
            };

            this.isEmptyOrNull = function (obj) {
                /// <summary>
                /// Retrieve true when object is empty, undefined or null.
                /// </summary>
                /// <param name='obj'>Object to be checked</param>
                /// <returns type='boolean'>True when object is empty, undefined or null.</returns>
                /// <doc>myPerformance.factory:methods#isEmptyOrNull</doc>
                return ((obj === undefined) ||
                    (obj === null) ||
                    (angular.isString(obj) && (obj === '')) ||
                    (angular.isArray(obj) && (obj.length === 0)) // Arrays
                );
            };

            this.urlFormat = function () {
                /// <summary>
                /// Format url using string.format way to match parameters.
                /// </summary>
                /// <returns type='string'>String parsed.</returns>
                /// <doc>myPerformance.factory:methods#urlFormat</doc>
                var args = arguments, url = '', baseUrl = '', qs = '', qsFormatted = '', splitted, vars = [], hash, i;
                if (this.isEmptyOrNull(args)) {
                    return '';
                }
                if (args.length === 1) {
                    url = args[0];
                }
                else {
                    url = args[0].replace(/\{(\d+)\}/g, function (match, number) {
                        return args[parseInt(number, 10) + 1] !== undefined ? encodeURIComponent(args[parseInt(number, 10) + 1]) : '';
                    });
                }
                // Remove empty qs parameters
                if (url.indexOf('?') >= 0) {
                    splitted = url.split('?');
                    baseUrl = splitted[0];
                    if (splitted.length > 1) {
                        qs = splitted[1].split('&');
                        for (i = 0; i < qs.length; i++) {
                            if (qs[i].indexOf('=') >= 0) {
                                hash = qs[i].split('=');
                                vars.push({ code: hash[0], value: hash[1] });
                            }
                            else {
                                vars.push({ code: qs[i], value: '' });
                            }
                        }
                        // Fill qsFormatted using vars and removing empty values
                        for (i = 0; i < vars.length; i++) {
                            if (vars[i].value && vars[i].value !== '') {
                                qsFormatted = qsFormatted + ((qsFormatted === '') ? '?' : '&') + vars[i].code + '=' + vars[i].value;
                            }
                        }
                    }
                }
                else {
                    baseUrl = url;
                }
                return baseUrl + qsFormatted;
            };

            this.getUserList = function(){
                var deferred = $q.defer();
            	$http.get(url.getUserList,{})
            	.success(function(data){
            		console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
            	})
            	.error(function(error){
            		deferred.reject(error);
            	});

                return deferred.promise;
            };

            this.addUser = function(user){
                var deferred = $q.defer();
                $http.post(url.addUser,user)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateUser = function(user){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateUser,user.id);
                $http.put(urlQuery,user)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.checkUser = function(id){
                var deferred = $q.defer();
                var urlCheck = this.urlFormat(url.checkUser,id);
                $http.get(urlCheck,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            }

            this.getRoleList = function(){
                var deferred = $q.defer();
                $http.get(url.getRoleList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addRole = function(role){
                var deferred = $q.defer();
                $http.post(url.addRole,role)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateRole = function(role){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateRole,role.name);
                $http.put(urlQuery,role)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getFlyerList = function(){
                var deferred = $q.defer();
                $http.get(url.getFlyerList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addFlyer = function(flyer){
                var deferred = $q.defer();
                $http.post(url.addFlyer,flyer)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateFlyer = function(flyer){
                var deferred = $q.defer();
                $http.put(url.updateFlyer,flyer)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateFlyerOnly = function(flyer){
                var deferred = $q.defer();
                $http.put(url.updateFlyerOnly,flyer)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getFlyer = function(flyerID){
                var deferred = $q.defer();
                var urlGetFlyer = this.urlFormat(url.getFlyer,flyerID);
                $http.get(urlGetFlyer,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getQuiz = function(quizID){
                var deferred = $q.defer();
                var urlGetQuiz = this.urlFormat(url.getQuiz,quizID);
                $http.get(urlGetQuiz,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getQuizList = function(){
                var deferred = $q.defer();
                $http.get(url.getQuizList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addQuiz = function(quiz){
                var deferred = $q.defer();
                $http.post(url.addQuiz,quiz)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateQuiz = function(quiz){
                var deferred = $q.defer();
                $http.put(url.updateQuiz,quiz)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateQuizOnly = function(quiz){
                var deferred = $q.defer();
                $http.put(url.updateQuizOnly,quiz)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getQuestionList = function(quizID){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.getQuestionList,quizID);
                $http.get(urlQuery,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getRecordList = function(){
                var deferred = $q.defer();
                $http.get(url.getRecordList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addRecord = function(record){
                var deferred = $q.defer();
                $http.post(url.addRecord,record)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateRecord = function(record){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateRecord,record.name);
                $http.put(urlQuery,record)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getCourseList = function(){
                var deferred = $q.defer();
                $http.get(url.getCourseList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addCourse = function(course){
                var deferred = $q.defer();
                $http.post(url.addCourse,course)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateCourse = function(course){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateCourse,course.name);
                $http.put(urlQuery,course)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };
            this.getGoldenSampleList = function(){
                var deferred = $q.defer();
                $http.get(url.getGoldenSampleList,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };
            this.deleteGoldenSampleByID = function(id){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.deleteGoldenSampleByID,id);
                $http.delete(urlQuery,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.addGoldenSample = function(course){
                var deferred = $q.defer();
                $http.post(url.addGoldenSample,course)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.updateGoldenSample = function(course){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.updateGoldenSample,course.name);
                $http.put(urlQuery,course)
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getRoleHistoryListByUserID = function(userID){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.getRoleHistoryListByUserID,userID);
                $http.get(urlQuery,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.getCourseHistoryListByUserID = function(userID){
                var deferred = $q.defer();
                var urlQuery = this.urlFormat(url.getCourseHistoryListByUserID,userID);
                $http.get(urlQuery,{})
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };

            this.importUsers = function(file){
                var deferred = $q.defer();

                $http({
                    url: url.importUsers,
                    method: "POST",
                    transformRequest: function(){
                        var formData = new FormData();
                        formData.append('file', file);
                        return formData;
                    },
                    headers: {'Content-Type': undefined}
                })
                .success(function(data){
                    console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
                })
                .error(function(error){
                    deferred.reject(error);
                });

                return deferred.promise;
            };
        }]);
(function () {
    'use strict';

    angular
    .module('RDash')
        .factory('AuthenticationService', AuthenticationService);

    AuthenticationService.$inject = ['$http', '$cookies', '$rootScope', '$timeout', 'UserService'];
    function AuthenticationService($http, $cookies, $rootScope, $timeout, UserService) {
        var service = {};

        service.Login = Login;
        service.SetCredentials = SetCredentials;
        service.ClearCredentials = ClearCredentials;
        service.GetCredentials = GetCredentials;
        return service;

        function Login(username, password, callback) {

            /* Dummy authentication for testing, uses $timeout to simulate api call
             ----------------------------------------------*/
            $timeout(function () {

                
                
                var response;
                UserService.GetByUsername(username)
                    .then(function (user) {
                        if (user !== null && user.password === password) {
                            response = { success: true };
                        } else {
                            response = { success: false, message: 'Username or password is incorrect' };
                        }
                        callback(response);
                    });
            }, 1000);

            /* Use this for real authentication
             ----------------------------------------------*/
            //$http.post('/api/authenticate', { username: username, password: password })
            //    .success(function (response) {
            //        callback(response);
            //    });

        }

        function SetCredentials(username, password) {
            var authdata = Base64.encode(username + ':' + password);

            $rootScope.globals = {
                currentUser: {
                    username: username,
                    authdata: authdata
                }
            };

            // set default auth header for http requests
            $http.defaults.headers.common['Authorization'] = 'Basic ' + authdata;

            // store user details in globals cookie that keeps user logged in for 1 week (or until they logout)
            var cookieExp = new Date();
            cookieExp.setDate(cookieExp.getDate() + 7);
            $cookies.putObject('globals', $rootScope.globals, { expires: cookieExp });
        }

        function ClearCredentials() {
            $rootScope.globals = {};
            $cookies.remove('globals');
            $http.defaults.headers.common.Authorization = 'Basic';
        }

        function GetCredentials() {
            return $cookies.get('globals');
        }
    }

    // Base64 encoding service used by AuthenticationService
    var Base64 = {

        keyStr: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',

        encode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            do {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output = output +
                    this.keyStr.charAt(enc1) +
                    this.keyStr.charAt(enc2) +
                    this.keyStr.charAt(enc3) +
                    this.keyStr.charAt(enc4);
                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";
            } while (i < input.length);

            return output;
        },

        decode: function (input) {
            var output = "";
            var chr1, chr2, chr3 = "";
            var enc1, enc2, enc3, enc4 = "";
            var i = 0;

            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            var base64test = /[^A-Za-z0-9\+\/\=]/g;
            if (base64test.exec(input)) {
                window.alert("There were invalid base64 characters in the input text.\n" +
                    "Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\n" +
                    "Expect errors in decoding.");
            }
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            do {
                enc1 = this.keyStr.indexOf(input.charAt(i++));
                enc2 = this.keyStr.indexOf(input.charAt(i++));
                enc3 = this.keyStr.indexOf(input.charAt(i++));
                enc4 = this.keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }

                chr1 = chr2 = chr3 = "";
                enc1 = enc2 = enc3 = enc4 = "";

            } while (i < input.length);

            return output;
        }
    };

})();
(function () {
    'use strict';

    angular
        .module('RDash')
        .factory('UserService', UserService);

    UserService.$inject = ['$http'];
    function UserService($http) {
        var service = {};

        service.GetAll = GetAll;
        service.GetById = GetById;
        service.GetByUsername = GetByUsername;
        service.Create = Create;
        service.Update = Update;
        service.Delete = Delete;

        return service;

        function GetAll() {
            return $http.get('/api/users').then(handleSuccess, handleError('Error getting all users'));
        }

        function GetById(id) {
            return $http.get('/api/users/' + id).then(handleSuccess, handleError('Error getting user by id'));
        }

        function GetByUsername(username) {
            return $http.get('/api/users/' + username).then(handleSuccess, handleError('Error getting user by username'));
        }

        function Create(user) {
            return $http.post('/api/users', user).then(handleSuccess, handleError('Error creating user'));
        }

        function Update(user) {
            return $http.put('/api/users/' + user.id, user).then(handleSuccess, handleError('Error updating user'));
        }

        function Delete(id) {
            return $http.delete('/api/users/' + id).then(handleSuccess, handleError('Error deleting user'));
        }

        // private functions

        function handleSuccess(res) {
            return res.data;
        }

        function handleError(error) {
            return function () {
                return { success: false, message: error };
            };
        }
    }

})();

(function () {
    'use strict';

    angular
        .module('RDash')
        .factory('UserService', UserService);

    UserService.$inject = ['$timeout', '$filter', '$q'];
    function UserService($timeout, $filter, $q) {

        var service = {};

        service.GetAll = GetAll;
        service.GetById = GetById;
        service.GetByUsername = GetByUsername;
        service.Create = Create;
        service.Update = Update;
        service.Delete = Delete;

        return service;

        function GetAll() {
            var deferred = $q.defer();
            deferred.resolve(getUsers());
            return deferred.promise;
        }

        function GetById(id) {
            var deferred = $q.defer();
            var filtered = $filter('filter')(getUsers(), { id: id });
            var user = filtered.length ? filtered[0] : null;
            deferred.resolve(user);
            return deferred.promise;
        }

        function GetByUsername(username) {
            // var deferred = $q.defer();
            // var filtered = $filter('filter')(getUsers(), { username: username });
            // var user = filtered.length ? filtered[0] : null;
            // deferred.resolve(user);
            // return deferred.promise;
            var deferred = $q.defer();
            var user = { username: 'ciscochatbot', password: 'ciscochatbot' };
            deferred.resolve(user);
            return deferred.promise;
        }

        function Create(user) {
            var deferred = $q.defer();

            // simulate api call with $timeout
            $timeout(function () {
                GetByUsername(user.username)
                    .then(function (duplicateUser) {
                        if (duplicateUser !== null) {
                            deferred.resolve({ success: false, message: 'Username "' + user.username + '" is already taken' });
                        } else {
                            var users = getUsers();

                            // assign id
                            var lastUser = users[users.length - 1] || { id: 0 };
                            user.id = lastUser.id + 1;

                            // save to local storage
                            users.push(user);
                            setUsers(users);

                            deferred.resolve({ success: true });
                        }
                    });
            }, 1000);

            return deferred.promise;
        }

        function Update(user) {
            var deferred = $q.defer();

            var users = getUsers();
            for (var i = 0; i < users.length; i++) {
                if (users[i].id === user.id) {
                    users[i] = user;
                    break;
                }
            }
            setUsers(users);
            deferred.resolve();

            return deferred.promise;
        }

        function Delete(id) {
            var deferred = $q.defer();

            var users = getUsers();
            for (var i = 0; i < users.length; i++) {
                var user = users[i];
                if (user.id === id) {
                    users.splice(i, 1);
                    break;
                }
            }
            setUsers(users);
            deferred.resolve();

            return deferred.promise;
        }

        // private functions

        function getUsers() {
            if(!localStorage.users){
                localStorage.users = JSON.stringify([]);
            }

            return JSON.parse(localStorage.users);
        }

        function setUsers(users) {
            localStorage.users = JSON.stringify(users);
        }
    }
})();
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('AlertsCtrl', ['$scope', AlertsCtrl]);

function AlertsCtrl($scope) {
    $scope.alerts = [{
        type: 'success',
        msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
    }, {
        type: 'danger',
        msg: 'Found a bug? Create an issue with as many details as you can.'
    }];

    $scope.addAlert = function() {
        $scope.alerts.push({
            msg: 'Another alert!'
        });
    };

    $scope.closeAlert = function(index) {
        $scope.alerts.splice(index, 1);
    };
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('AuthCtrl', ['$rootScope', '$scope','$log','$uibModal','AuthenticationService', '$state', AuthCtrl]);
function AuthCtrl($rootScope, $scope, $log,$uibModal, AuthenticationService, $state) {
    if(!AuthenticationService.GetCredentials()){
        $state.go('login');
    }
}


/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('CourseCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', CourseCtrl])
    .controller('OperateCourseCtrl', ['$scope','$filter','$log','$uibModalInstance','app.services', OperateCourseCtrl]);
function CourseCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    $scope.courses = [];
    
    $scope.cancel = function() {
      $uibModalInstance.dismiss('cancel');
    };

    $scope.getCourseList = function(){
        services.getCourseList().then(function(result) {
            if (result.code == 1) {

                angular.forEach(result.data,function(value,key){
                    if(value.startDate>0)
                        value.startDate = new Date(value.startDate);
                    if(value.endDate>0)
                        value.endDate = new Date(value.endDate);
                });

                $scope.courses = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active:'desc', courseName: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addCourseModal = function(){
        //var scope = $rootScope.$new();
        $scope.course = {};
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'courseModal.html',
            controller: 'OperateCourseCtrl'
        });
        modalInstance.opened.then(function(){
        });
    };

    $scope.inactiveCourse = function(course){
        course.active = false;
        services.updateCourse(course).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeCourse = function(course){
        course.active = true;
        services.updateCourse(course).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateCourseModal = function(course){
        //var scope = $rootScope.$new();
        $scope.course =course;
        $scope.isModify = true;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'courseModal.html',
            controller: 'OperateCourseCtrl',
        });
    };

    $scope.updateCourse = function(course){
        services.updateCourse(course).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getCourseList();
}

function OperateCourseCtrl($scope,$filter,$log,$uibModalInstance,services) { 


    $scope.closeCourseModal = function(){
        $uibModalInstance.dismiss();
    };

    $scope.openStartDate = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.openedStartDate = true;
    };

    $scope.openEndDate = function($event) {
      $event.preventDefault();
      $event.stopPropagation();

      $scope.openedEndDate = true;
    };

    $scope.submitCourseData = function(){
        $scope.dataLoading = true;

        $scope.course.startDate = $filter('date')($scope.course.startDate,'yyyy-MM-dd');
        $scope.course.endDate = $filter('date')($scope.course.endDate,'yyyy-MM-dd');

        	if($scope.isModify){
                services.updateCourse($scope.course).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getCourseList();
                        $scope.closeCourseModal();
                    }
                }, function (error) {
                    console.log(error); 
                    $scope.dataLoading = false;   
                });
            }else{
                services.addCourse($scope.course).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getCourseList();
                        $scope.closeCourseModal();
                    }
                }, function (error) {
                    console.log(error); 
                    $scope.dataLoading = false;   
                });
            }
    };
    


}
angular
    .module('RDash')
    .controller('EmployeeCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', EmployeeCtrl])
    .controller('OperateUserCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateUserCtrl])
    .controller('ImportUserCtrl', ['$scope','$log','$uibModalInstance','app.services', ImportUserCtrl])
    .controller('RoleHistoryCtrl', ['$scope','$log','$uibModalInstance','app.services', RoleHistoryCtrl]);
function EmployeeCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    
    $scope.users = [];
    $scope.roles = [];
    $scope.isIDLegal = false;

    $scope.getRoleList = function(){
        services.getRoleList().then(function(result) {
            if (result.code == 1) {
                $scope.roles = result.data;
            }
        }, function (error) {
            console.log(error);    
        });       
    };

    $scope.getUserList = function(){
        services.getUserList().then(function(result) {
            if (result.code == 1) {
                $scope.users = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active: 'desc', id: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addUserModal = function(){
        $scope.userView = false;
        $scope.user = {};
        $scope.user.roleID = '';
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'templates/userModal.html',
            controller: 'OperateUserCtrl',
        });
    };

    $scope.importUserModal = function(){
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'templates/userImport.html',
            controller: 'ImportUserCtrl',
        });
    };

    $scope.getRoleHistoryListByUserID = function(userID){
        services.getRoleHistoryListByUserID(userID).then(function(result) {
            if (result.code == 1) {
                $scope.histories = result.data;
                $scope.tableHistoryParams = new NgTableParams(
                    {
                        page: 1,            // show first page
                        count: 10,           // count per page
                        sorting: { updateTime: 'desc'}
                    },
                    {
                        total: 0, // length of data
                        dataset: result.data
                    });
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getCourseHistoryListByUserID = function(userID){
        services.getCourseHistoryListByUserID(userID).then(function(result) {
            if (result.code == 1) {
                $scope.courses = result.data;
                $scope.tableCoursesParams = new NgTableParams(
                    {
                        page: 1,            // show first page
                        count: 10,           // count per page
                        sorting: { updateTime: 'desc'}
                    },
                    {
                        total: 0, // length of data
                        dataset: result.data
                    });
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getHistoryModal = function(user){
        $scope.user = user;
        $scope.getRoleHistoryListByUserID($scope.user.id);
        
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'templates/historyModal.html',
            controller: 'RoleHistoryCtrl',
        });
    };

    $scope.inactiveUser = function(user){
        user.active = false;
        services.updateUser(user).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeUser = function(user){
        user.active = true;
        services.updateUser(user).then(function(result) {
            if (result.code == 1) {

            }
        }, function (error) {
            console.log(error);    
        });
    };
    
    $scope.viewUserModal = function(user){
        $scope.userView = true;
        $scope.user =user;
        $scope.isModify = true;
        $scope.getRoleHistoryListByUserID($scope.user.id);
        $scope.getCourseHistoryListByUserID($scope.user.id);
        
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'templates/userModal.html',
            controller: 'OperateUserCtrl',
        });
    };

    $scope.updateUserModal = function(user){
        $scope.userView = false;
        $scope.user =user;
        $scope.isModify = true;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'templates/userModal.html',
            controller: 'OperateUserCtrl',
        });
    };

    $scope.showCourseHistory = function(user){

    };

    $scope.updateUser = function(user){
        services.updateUser(user).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getRoleList();
    $scope.getUserList();
}

function ImportUserCtrl($scope, $log,$uibModalInstance, services) { 
    $scope.fileChanged = function(ele){
        $scope.files = ele.files;

        if(ele.files.length > 0){
            $scope.fileInfo = ele.files[0].name;
        }else{
            $scope.fileInfo = "Please select an excel file.";
        }
        $scope.$apply();
    };

    $scope.uploadFile = function(){
        if($scope.files == undefined){
            alert("Please select an excel file.")
            return ;
        }
        $scope.dataLoading = true;
        services.importUsers($scope.files[0])
        .then(function (result) {
            $scope.dataLoading = false;
            if(result.code == '1'){
                alert("Upload User Excel Success");
                $scope.getRoleList();
                $scope.getUserList();
                $uibModalInstance.dismiss();

            }else{
                alert(result.message) ;
            }
        },function(error){
            $scope.dataLoading = false;
            if(error.message)
                alert(error.message) ;
        });
    };

    $scope.closeImportModal = function(){
        $uibModalInstance.dismiss();
    };
}

function OperateUserCtrl($scope, $log,$uibModalInstance, services) { 

    $scope.closeUserModal = function(){
        $uibModalInstance.dismiss();
    };

    $scope.checkUserID = function(id){
        services.checkUser(id).then(function(result) {
            if (result.code == 1) {
                if(result.data == true){
                    $scope.userForm.id.$setValidity('acountvalid', true);
                    $scope.userForm.id.$invalid = false;

                }else{
                    $scope.userForm.id.$setValidity('acountvalid', false);
                    $scope.userForm.id.$invalid = true;
                }
            }
        }, function (error) {
            console.log(error);    
        });
    }
    
    $scope.submitUserData = function(){
        $scope.dataLoading = true;
        if($scope.isModify){
            services.updateUser($scope.user).then(function(result) {
                $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getUserList();
                        $scope.closeUserModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
            }else{
                services.addUser($scope.user).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getUserList();
                        $scope.closeUserModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
            });
        }
    };
}

function RoleHistoryCtrl($scope, $log,$uibModalInstance, services) { 
    
    
    $scope.closeHistoryModal = function(){
        $uibModalInstance.dismiss();
    };
    
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('FlyerCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', '$filter', FlyerCtrl])
    .controller('OperateFlyerCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateFlyerCtrl]);
function FlyerCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams, $filter) {    
    $scope.roles = [];
    $scope.users = [];
    $scope.GMT = services.getGMT();

    $scope.flyers = [];

    $scope.getFlyerList = function(){
        services.getFlyerList().then(function(result) {
            if (result.code == 1) {
                $scope.flyers = result.data;

                angular.forEach($scope.flyers, function (item, index) {
                    if(item.audienceType == 'R'){
                        item.audienceTypeValue = 'By Role';
                    }else if(item.audienceType == 'U'){
                        item.audienceTypeValue = 'By User';
                    }
                });

                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active:'desc', id: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.openDatePicker = function(){
        $('#datetimepicker').datetimepicker({
            autoclose: true,
            format: 'yyyy-mm-dd hh:ii'
        });

        $('#datetimepicker').datetimepicker('show');
    };
    
    $scope.addFlyerModal = function(){
        $scope.flyer = {};
        $scope.isModify = false;

        $scope.flyer.activeTime = $filter('date')(new Date(),'yyyy-MM-dd HH:mm', $scope.GMT);
        $scope.flyer.audienceType = 'R';

        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            size: 'lg',
            templateUrl: 'flyerModal.html',
            controller: 'OperateFlyerCtrl',
        });
    };

    $scope.inactiveFlyer = function(flyer){
        flyer.active = false;
        services.updateFlyerOnly(flyer).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeFlyer = function(flyer){
        flyer.active = true;
        services.updateFlyerOnly(flyer).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateFlyerModal = function(flyer){
        $scope.isModify = true;
        services.getFlyer(flyer.id).then(function(result) {
            if (result.code == 1) {
                $scope.flyer = result.data;

                $scope.flyer.activeTime =  $filter('date')( $scope.flyer.activeTime ,'yyyy-MM-dd HH:mm', $scope.GMT);

                if($scope.flyer.audienceType == 'R'){
                    $scope.flyer.roleList=$scope.flyer.listRoleModel;
                }else{
                    $scope.flyer.userList=$scope.flyer.listUserModel;
                }

                var modalInstance = $uibModal.open({
                    scope: $scope,
                    animation: true,
                    size: 'lg',
                    templateUrl: 'flyerModal.html',
                    controller: 'OperateFlyerCtrl',
                });
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateFlyer = function(flyer){
        services.updateFlyer(flyer).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getRoleList = function(){
        services.getRoleList().then(function(result) {
            if (result.code == 1) {
                $scope.roles = result.data;
            }
        }, function (error) {
            console.log(error);    
        });       
    };

    $scope.getUserList = function(){
        services.getUserList().then(function(result) {
            if (result.code == 1) {
                $scope.users = result.data;
            }
        }, function (error) {
            console.log(error);    
        });       
    };

    $scope.init = function(){
        $scope.getFlyerList();

        $scope.getRoleList();
        $scope.getUserList();
        
    };

    $scope.init();
}

function OperateFlyerCtrl($scope, $log,$uibModalInstance, services) { 


    $scope.closeFlyerModal = function(){
        $uibModalInstance.dismiss();
    };



    $scope.submitFlyerData = function(){
        var list = [];
        $scope.dataLoading = true;
        if($scope.flyer.audienceType=='R'){
            for(var i = 0; i < $scope.flyer.roleList.length; i++){
                list.push($scope.flyer.roleList[i].id);
            }
        }else{
            for(var i = 0; i < $scope.flyer.userList.length; i++){
                list.push($scope.flyer.userList[i].id);
            }
        }

        $scope.flyer.audienceList = list.join(',');

        	if($scope.isModify){
                services.updateFlyer($scope.flyer).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getFlyerList();
                        $scope.closeFlyerModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
            }else{
                services.addFlyer($scope.flyer).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getFlyerList();
                        $scope.closeFlyerModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
            }
    };
    
}
(function () {
    'use strict';

    angular
        .module('RDash')
        .controller('LoginController', LoginController);

    LoginController.$inject = ['$scope','$location', 'AuthenticationService'];
    function LoginController($scope, $location, AuthenticationService) {
        $scope.vm = {};

        AuthenticationService.ClearCredentials();

        $scope.login = function() {
            $scope.vm.dataLoading = true;
            AuthenticationService.Login($scope.vm.username, $scope.vm.password, function (response) {
                if (response.success) {
                    AuthenticationService.SetCredentials($scope.vm.username, $scope.vm.password);
                    $location.path('/');
                } else {
                    $scope.vm.dataLoading = false;
                }
            });
        };
    }

})();

/**
 * Master Controller
 */

angular.module('RDash')
    .controller('MasterCtrl', ['$rootScope', '$scope', '$cookieStore', MasterCtrl]);

function MasterCtrl($rootScope, $scope, $cookieStore) {
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 992;

    $scope.getWidth = function() {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function(newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = ! $cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }

    });

    $scope.toggleSidebar = function() {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function() {
        $scope.$apply();
    };

    $scope.isLogin = function(){
        return window.location.href.toLowerCase().split('/#/')[1].substr(0,5)=='login';
    }

    // $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {
    //     console.log(event);
    //     console.log(toState);
    //     console.log(toParams);
    //     console.log(fromState);
    //     console.log(fromParams);
    //     console.log(error);    
    // });

    // $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
    //     console.log(event);
    //     console.log(toState);
    //     console.log(toParams);
    //     console.log(fromState);
    //     console.log(fromParams);   
    // });
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('QuizCtrl', ['$rootScope', '$scope', '$filter', '$state', '$stateParams', '$log','$uibModal','app.services','NgTableParams', QuizCtrl]);
function QuizCtrl($rootScope, $scope, $filter, $state, $stateParams, $log, $uibModal, services,NgTableParams) {
    $scope.courses = [];
    
    $scope.roles = [];
    $scope.users = [];
    $scope.GMT = services.getGMT();
    
    if($stateParams.quiz){
        $scope.quiz = $stateParams.quiz;
        $scope.quiz.questions = [];
        $scope.isModify = true;
    }else{
        $scope.quiz = {};
        $scope.quiz.questions = [];
        $scope.isModify = false;
    }

    var questionEmpty = {
            number: $scope.quiz.questions.length+1,
            subject: '',
            cs: ['','','',''],
            answer: ''
    };

    $scope.getRoleList = function(){
        services.getRoleList().then(function(result) {
            if (result.code == 1) {
                $scope.roles = result.data;
            }
        }, function (error) {
            console.log(error);    
        });       
    };

    $scope.getUserList = function(){
        services.getUserList().then(function(result) {
            if (result.code == 1) {
                $scope.users = result.data;
            }
        }, function (error) {
            console.log(error);    
        });       
    };

    $scope.addQuestion = function(){
        $('.collapse').collapse('hide');
        var questionEmpty = {
            number: $scope.quiz.questions.length+1,
            subject: '',
            cs: ['','','',''],
            answer: ''
        }
        $scope.quiz.questions.push(questionEmpty);
    };

    $scope.deleteQuestion = function(question){
        for(var i=0; i<$scope.quiz.questions.length;i++){
            if($scope.quiz.questions[i]==question){
                $scope.quiz.questions.splice(i,1);
                break;
            }
        }
        
        if($scope.quiz.questions.length==0){
            $scope.quiz.questions.push(questionEmpty);
        }
    };

    $scope.openDatePicker = function(){
        $('#datetimepicker').datetimepicker({
            autoclose: true,
            format: 'yyyy-mm-dd hh:ii'
        });

        $('#datetimepicker').datetimepicker('show');
    };

    $scope.getCourseList = function(){
        services.getCourseList().then(function(result) {
            if (result.code == 1) {

                angular.forEach(result.data,function(value,key){
                    if(value.startDate>0)
                        value.startDate = new Date(value.startDate);
                    if(value.endDate>0)
                        value.endDate = new Date(value.endDate);
                });

                $scope.courses = result.data;

                if($scope.isModify){
                    for(var index = 0; index < $scope.courses.length; index++){
                        var course = $scope.courses[index];
                        if(course.id == $scope.quiz.courseID){
                            $scope.quiz.course = $scope.courses[index];
                            //$scope.quiz.activeTime = $filter('date')( $scope.quiz.course.startDate ,'yyyy-MM-dd') + ' 09:00';
                            break;
                        }
                    }

                }else{
                    $scope.quiz.course = $scope.courses[0];
                    $scope.quiz.activeTime = $filter('date')( $scope.quiz.course.startDate ,'yyyy-MM-dd') + ' 09:00';
                }
                
            }
        }, function (error) {
            console.log(error);    
        });       
    };

    $scope.updateQuiz = function(quiz){
        services.updateQuiz(quiz).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.changeCourse = function(){
        $scope.quiz.activeTime = $filter('date')( $scope.quiz.course.startDate ,'yyyy-MM-dd') + ' 09:00';
    };

    $scope.submitQuizData = function(){
        $scope.dataLoading = true;
        $scope.quiz.courseID = $scope.quiz.course.id;

        var list = [];

        if($scope.quiz.audienceType=='R'){
            for(var i = 0; i < $scope.quiz.roleList.length; i++){
                list.push($scope.quiz.roleList[i].id);
            }
        }else{
            for(var i = 0; i < $scope.quiz.userList.length; i++){
                list.push($scope.quiz.userList[i].id);
            }
        }

        $scope.quiz.audienceList = list.join(',');
        
        for(var i = 0; i < $scope.quiz.questions.length; i++){
            var question = $scope.quiz.questions[i];
            question.choices = question.cs.join('@@@');
        }


        if($scope.isModify){
                services.updateQuiz($scope.quiz).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $state.go('quizList');
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
        }else{
                services.addQuiz($scope.quiz).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $state.go('quizList');
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
        }
    };

    $scope.closeQuizModal = function(){
        $state.go('quizList');
    };

    $scope.init = function(){
        $scope.getCourseList();
        $scope.getRoleList();
        $scope.getUserList();

        if($scope.isModify){

            services.getQuiz($scope.quiz.id).then(function(result) {
                    if (result.code == 1) {

                        $scope.quiz.activeTime =  $filter('date')( result.data.activeTime ,'yyyy-MM-dd HH:mm', $scope.GMT);

                        $scope.quiz.questions = result.data.listQuestionModel;

                        angular.forEach($scope.quiz.questions,function(item,key){
                            item.cs = item.choices.split('@@@');
                        });

                        if($scope.quiz.audienceType == 'R'){
                            $scope.quiz.roleList=result.data.listRoleModel;
                        }else{
                            $scope.quiz.userList=result.data.listUserModel;
                        }
                        
                    }
                }, function (error) {
                    console.log(error);    
                });    

        }else{
            $scope.quiz.activeTime = $filter('date')(new Date(),'yyyy-MM-dd HH:mm', $scope.GMT);
            $scope.quiz.audienceType = 'R';
            $scope.quiz.questions.push(questionEmpty);
        }
        
    };

    $scope.init();
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('QuizListCtrl', ['$rootScope', '$scope','$log', '$state', '$uibModal','app.services','NgTableParams', QuizListCtrl]);
function QuizListCtrl($rootScope, $scope, $log,$state,$uibModal, services,NgTableParams) {
    $scope.quizs = [];

    $scope.GMT = services.getGMT();

    $scope.getQuizList = function(){
        services.getQuizList().then(function(result) {
            if (result.code == 1) {
                $scope.quizs = result.data;

                angular.forEach($scope.quizs, function (item, index) {
                    if(item.audienceType == 'R'){
                        item.audienceTypeValue = 'By Role';
                    }else if(item.audienceType == 'U'){
                        item.audienceTypeValue = 'By User';
                    }
                });

                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active:'desc', quizName: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addQuizModal = function(){
        //var scope = $rootScope.$new();
        $scope.quiz = {};
        $scope.isModify = false;
        var params = {'quiz':null};
        $state.go('quiz', params);
    };

    $scope.inactiveQuiz = function(quiz){
        quiz.active = false;
        services.updateQuizOnly(quiz).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeQuiz = function(quiz){
        quiz.active = true;
        services.updateQuizOnly(quiz).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateQuizModal = function(quiz){
        $scope.quiz = quiz;
        $scope.isModify = true;
        var params = {'quiz':quiz};
        $state.go('quiz', params);
    };

    $scope.getQuizList();
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('RecordCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', RecordCtrl])
    .controller('OperateRecordCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateRecordCtrl]);
function RecordCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    $scope.records = [];

    $scope.getRecordList = function(){
        services.getRecordList().then(function(result) {
            if (result.code == 1) {
                $scope.records = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active:'desc', recordName: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addRecordModal = function(){
        //var scope = $rootScope.$new();
        $scope.record = {};
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'recordModal.html',
            controller: 'OperateRecordCtrl',
        });
    };

    $scope.inactiveRecord = function(record){
        record.active = false;
        services.updateRecord(record).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeRecord = function(record){
        record.active = true;
        services.updateRecord(record).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateRecordModal = function(record){
        //var scope = $rootScope.$new();
        $scope.record =record;
        $scope.isModify = true;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'recordModal.html',
            controller: 'OperateRecordCtrl',
        });
    };

    $scope.updateRecord = function(record){
        services.updateRecord(record).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getRecordList();
}

function OperateRecordCtrl($scope, $log,$uibModalInstance, services) { 


    $scope.closeRecordModal = function(){
        $uibModalInstance.dismiss();
    };



    $scope.submitRecordData = function(){
        $scope.dataLoading = true;
        	if($scope.isModify){
                services.updateRecord($scope.record).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getRecordList();
                        $scope.closeRecordModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
            }else{
                services.addRecord($scope.record).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getRecordList();
                        $scope.closeRecordModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
            }
    };
    
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('RoleCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', RoleCtrl])
    .controller('OperateRoleCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateRoleCtrl]);
function RoleCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    $scope.roles = [];

    $scope.getRoleList = function(){
        services.getRoleList().then(function(result) {
            if (result.code == 1) {
                $scope.roles = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 10,           // count per page
                    sorting: { active:'desc', roleName: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    }

    $scope.addRoleModal = function(){
        //var scope = $rootScope.$new();
        $scope.role = {};
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'roleModal.html',
            controller: 'OperateRoleCtrl',
        });
    };

    $scope.inactiveRole = function(role){
        role.active = false;
        services.updateRole(role).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeRole = function(role){
        role.active = true;
        services.updateRole(role).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.updateRoleModal = function(role){
        //var scope = $rootScope.$new();
        $scope.role =role;
        $scope.isModify = true;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            templateUrl: 'roleModal.html',
            controller: 'OperateRoleCtrl',
        });
    };

    $scope.updateRole = function(role){
        services.updateRole(role).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.getRoleList();
}

function OperateRoleCtrl($scope, $log,$uibModalInstance, services) { 


    $scope.closeRoleModal = function(){
        $uibModalInstance.dismiss();
    };



    $scope.submitRoleData = function(){
        $scope.dataLoading = true;
        	if($scope.isModify){
                services.updateRole($scope.role).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getRoleList();
                        $scope.closeRoleModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
            }else{
                services.addRole($scope.role).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getRoleList();
                        $scope.closeRoleModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
            }
    };
    
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('GoldenSampleCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', GoldenSampleCtrl])
    .controller('OperateGoldenSampleCtrl', ['$scope','$log','$uibModalInstance','app.services', OperateGoldenSampleCtrl]);
function GoldenSampleCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    
    $scope.goldenSamples = [];

    $scope.getRoleList = function(){
        services.getRoleList().then(function(result) {
            if (result.code == 1) {
                $scope.roles = result.data;
            }
        }, function (error) {
            console.log(error);    
        });       
    };

    $scope.getCourseList = function(){
        services.getCourseList().then(function(result) {
            if (result.code == 1) {
                $scope.courses = result.data;
            }
        }, function (error) {
            console.log(error);    
        });       
    };

    $scope.getGoldenSampleList = function(){
        services.getGoldenSampleList().then(function(result) {
            if (result.code == 1) {
                $scope.goldenSamples = result.data;
                $scope.tableParams = new NgTableParams(
                {
                    page: 1,            // show first page
                    count: 4,           // count per page
                    sorting: { active:'desc', goldenSampleName: 'asc'}
                },
                {
                    total: 0, // length of data
                    dataset: result.data
                });
            }
        }, function (error) {
            console.log(error);    
        });       
    };



    $scope.addGoldenSampleModal = function(){
        //var scope = $rootScope.$new();
        $scope.goldenSample = {};
        $scope.goldenSample.roleID = $scope.roles[0].id;
        $scope.isModify = false;
        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            size: 'lg',
            width:800,
            height: 600,
            templateUrl: 'goldenSampleModal.html',
            controller: 'OperateGoldenSampleCtrl',
        });
    };

    $scope.inactiveGoldenSample = function(goldenSample){
        goldenSample.active = false;
        services.updateGoldenSample(goldenSample).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.activeGoldenSample = function(goldenSample){
        goldenSample.active = true;
        services.updateGoldenSample(goldenSample).then(function(result) {
            if (result.code == 1) {
                //alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    Array.prototype.contains = function (obj) {  
        var i = this.length;  
        while (i--) {  
            if (this[i] == obj) {  
                return true;  
            }  
        }  
        return false;  
    };  

    var loadCourseCode = function(){
        var mandatory = $scope.goldenSample.mandatory.split(',');
        var optional = $scope.goldenSample.optional.split(',');

        $scope.goldenSample.mandatoryCourse = [];
        $scope.goldenSample.optionalCourse = [];

        for(var index in $scope.courses){
            if(mandatory.contains($scope.courses[index].id))
                $scope.goldenSample.mandatoryCourse.push($scope.courses[index]);
            if(optional.contains($scope.courses[index].id))
                $scope.goldenSample.optionalCourse.push($scope.courses[index]);
        }
    };

    $scope.updateGoldenSampleModal = function(goldenSample){
        //var scope = $rootScope.$new();
        $scope.goldenSample = goldenSample;
        $scope.isModify = true;
        loadCourseCode();

        var modalInstance = $uibModal.open({
            scope: $scope,
            animation: true,
            size: 'lg',
            width:800,
            height: 600,
            templateUrl: 'goldenSampleModal.html',
            controller: 'OperateGoldenSampleCtrl',
        });

        modalInstance.opened.then(function(){
            
        });
    };

    $scope.updateGoldenSample = function(goldenSample){
        services.updateGoldenSample(goldenSample).then(function(result) {
            if (result.code == 1) {
                alert("success");
            }
        }, function (error) {
            console.log(error);    
        });
    };

    $scope.deleteGoldenSampleByID = function(id){
        if(confirm('Are you sure you want to delete?')){
            services.deleteGoldenSampleByID(id).then(function(result) {
                if (result.code == 1) {
                    $scope.getGoldenSampleList();
                }
            }, function (error) {
                console.log(error);    
            });
        }
        
    };

    $scope.getRoleList();
    $scope.getCourseList();
    $scope.getGoldenSampleList();
}

function OperateGoldenSampleCtrl($scope, $log,$uibModalInstance, services) { 


    $scope.closeGoldenSampleModal = function(){
        $uibModalInstance.dismiss();
    };

    var getCourseCode = function(){
        var mandatory = [];
        var optional = [];
        for(var index in $scope.goldenSample.mandatoryCourse){
            mandatory.push($scope.goldenSample.mandatoryCourse[index].id);
        }
        for(var index in $scope.goldenSample.optionalCourse){
            optional.push($scope.goldenSample.optionalCourse[index].id);
        }

        $scope.goldenSample.mandatory = mandatory.join(',');
        $scope.goldenSample.optional = optional.join(',');
    };

    $scope.submitGoldenSampleData = function(){
        $scope.dataLoading = true;
            getCourseCode();
        	if($scope.isModify){
                services.updateGoldenSample($scope.goldenSample).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getGoldenSampleList();
                        $scope.closeGoldenSampleModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
            }else{
                services.addGoldenSample($scope.goldenSample).then(function(result) {
                    $scope.dataLoading = false;
                    if (result.code == 1) {
                        $scope.getGoldenSampleList();
                        $scope.closeGoldenSampleModal();
                    }
                }, function (error) {
                    $scope.dataLoading = false;
                    console.log(error);    
                });
            }
    };
    
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('SettingCtrl', ['$rootScope', '$scope','$log','$uibModal','app.services','NgTableParams', SettingCtrl]);
function SettingCtrl($rootScope, $scope, $log,$uibModal, services,NgTableParams) {
    $scope.fileChanged = function(ele){
        $scope.files = ele.files;

        if(ele.files.length > 0){
            $scope.fileInfo = ele.files[0].name;
        }else{
            $scope.fileInfo = "Please select an excel file.";
        }
        $scope.$apply();
    };

    $scope.uploadFile = function(){
        if($scope.files == undefined){
            alert("Please select an excel file.")
            return ;
        }
        $scope.dataLoading = true;
        services.importUsers($scope.files[0])
        .then(function (result) {
            $scope.dataLoading = false;
            if(result.code == '1'){
                alert("Upload User Excel Success")
            }else{
                alert(result.message) ;
            }
        });
    };
}