angular.module('RDash', ['ui.bootstrap', 'ui.router', 'ngCookies']);
'use strict';

/**
 * Route configuration for the RDash module.
 */
angular.module('RDash').config(['$stateProvider', '$urlRouterProvider',
    function($stateProvider, $urlRouterProvider) {

        // For unmatched routes
        $urlRouterProvider.otherwise('/employee');

        // Application routes
        $stateProvider
            .state('employee', {
                url: '/employee',
                templateUrl: 'templates/employee.html',
                controller: 'EmployeeCtrl'
            }) 
            .state('role', {
                url: '/role',
                templateUrl: 'templates/role.html',
                controller: 'RoleCtrl'
            }) 
            .state('course', {
                url: '/course',
                templateUrl: 'templates/course.html',
                controller: 'CourseCtrl'
            }) 
            .state('sample', {
                url: '/sample',
                templateUrl: 'templates/sample.html',
                controller: 'SampleCtrl'
            })        
            // .state('index', {
            //     url: '/',
            //     templateUrl: 'templates/dashboard.html'
            // })
            // .state('tables', {
            //     url: '/tables',
            //     templateUrl: 'templates/tables.html'
            // })
            ;
    }
]);
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('AlertsCtrl', ['$scope', AlertsCtrl]);

function AlertsCtrl($scope) {
    $scope.alerts = [{
        type: 'success',
        msg: 'Thanks for visiting! Feel free to create pull requests to improve the dashboard!'
    }, {
        type: 'danger',
        msg: 'Found a bug? Create an issue with as many details as you can.'
    }];

    $scope.addAlert = function() {
        $scope.alerts.push({
            msg: 'Another alert!'
        });
    };

    $scope.closeAlert = function(index) {
        $scope.alerts.splice(index, 1);
    };
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('CourseCtrl', ['$scope', CourseCtrl]);

function CourseCtrl($scope) {
    $scope.message = "welcome";
}
angular
    .module('RDash')
    .controller('EmployeeCtrl', ['$scope','app.environments','app.services', EmployeeCtrl]);

function EmployeeCtrl($scope,environments,services) {

	services.getUserList().then(function(result) {
        
        if (result.code == 1) {
            $scope.users = result.data;
        }
    }, function (error) {
        console.log(error);    
    });

    $scope.submitUser = function(){

    };
}
/**
 * Master Controller
 */

angular.module('RDash')
    .controller('MasterCtrl', ['$scope', '$cookieStore', MasterCtrl]);

function MasterCtrl($scope, $cookieStore) {
    /**
     * Sidebar Toggle & Cookie Control
     */
    var mobileView = 992;

    $scope.getWidth = function() {
        return window.innerWidth;
    };

    $scope.$watch($scope.getWidth, function(newValue, oldValue) {
        if (newValue >= mobileView) {
            if (angular.isDefined($cookieStore.get('toggle'))) {
                $scope.toggle = ! $cookieStore.get('toggle') ? false : true;
            } else {
                $scope.toggle = true;
            }
        } else {
            $scope.toggle = false;
        }

    });

    $scope.toggleSidebar = function() {
        $scope.toggle = !$scope.toggle;
        $cookieStore.put('toggle', $scope.toggle);
    };

    window.onresize = function() {
        $scope.$apply();
    };
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('RoleCtrl', ['$scope', RoleCtrl]);

function RoleCtrl($scope) {
    $scope.message = "welcome";
}
/**
 * Alerts Controller
 */

angular
    .module('RDash')
    .controller('SampleCtrl', ['$scope', SampleCtrl]);

function SampleCtrl($scope) {
    $scope.message = "welcome";
}
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .directive('rdLoading', rdLoading);

function rdLoading() {
    var directive = {
        restrict: 'AE',
        template: '<div class="loading"><div class="double-bounce1"></div><div class="double-bounce2"></div></div>'
    };
    return directive;
};
/**
 * Widget Body Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetBody', rdWidgetBody);

function rdWidgetBody() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            loading: '=?',
            classes: '@?'
        },
        transclude: true,
        template: '<div class="widget-body" ng-class="classes"><rd-loading ng-show="loading"></rd-loading><div ng-hide="loading" class="widget-content" ng-transclude></div></div>',
        restrict: 'E'
    };
    return directive;
};

/**
 * Widget Footer Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetFooter', rdWidgetFooter);

function rdWidgetFooter() {
    var directive = {
        requires: '^rdWidget',
        transclude: true,
        template: '<div class="widget-footer" ng-transclude></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Header Directive
 */

angular
    .module('RDash')
    .directive('rdWidgetHeader', rdWidgetTitle);

function rdWidgetTitle() {
    var directive = {
        requires: '^rdWidget',
        scope: {
            title: '@',
            icon: '@'
        },
        transclude: true,
        template: '<div class="widget-header"><div class="row"><div class="pull-left"><i class="fa" ng-class="icon"></i> {{title}} </div><div class="pull-right col-xs-6 col-sm-4" ng-transclude></div></div></div>',
        restrict: 'E'
    };
    return directive;
};
/**
 * Widget Directive
 */

angular
    .module('RDash')
    .directive('rdWidget', rdWidget);

function rdWidget() {
    var directive = {
        transclude: true,
        template: '<div class="widget" ng-transclude></div>',
        restrict: 'EA'
    };
    return directive;

    function link(scope, element, attrs) {
        /* */
    }
};
/**
 * Loading Directive
 * @see http://tobiasahlin.com/spinkit/
 */

angular
    .module('RDash')
    .constant('app.constants',{
    	environments: {
	        PRO: 'PRO',
	        UAT: 'UAT',
	        SIT: 'SIT',
	        MOCK: 'MOCK'
    	}
    });
        angular
        .module('RDash')
        .provider('app.environments', ['app.constants', function (constants) {
            function getMock() {
                return {
                    environment: 'MOCK',
                    services: {
                        customService: {
                            serviceName: 'customService',
                            identifier: 'http://192.168.120.128:8080'
                        }
                    }
                };
            }
            function getPRO() {
                return {
                    environment: 'PRO',
                    services: {
                        customService: {
                            serviceName: 'customService',
                            identifier: '/'
                        }
                    }
                };
            }
            // config object
            var config = {
                environment: '',
                services: {}
            };
            var _basicUrls = {
                getUser: '/api/user/{0}',
                getUserList: '/api/user/list',
                deleteUser: '/api/user/{0}',
                addUser: '/api/user',
                updateUser: '/api/user/{0}'
            };
            function _joinUrl(domain, path) {
                return domain.replace(/(^http.*?)\/{0,}$/, '$1/') + path.replace(/^\/{0,}(.*)/, '$1');
            }
            function _generateURLs(identifier, urls) {
                var newUrls = angular.extend({}, urls);

                angular.forEach(newUrls, function (v, k) {
                    if (typeof v == 'string') {
                        if (!(v.match(/^http/))) {
                            newUrls[k] = _joinUrl(identifier, v);
                        }
                    }
                    else {
                        newUrls[k] = _generateURLs(identifier, v);
                    }
                });
                return newUrls;
            }
            this.setEnvironment = function (environment) {
                if (environment === constants.environments.MOCK) {
                    config = getMock();
                }
                else if (environment === constants.environments.PRO) {
                    config = getPRO();
                }
                if (!config.services.customService.url) {
                    config.services.customService.url = _generateURLs(config.services.customService.identifier, _basicUrls);
                }
                if (!config.services.customService.urlParams) {
                    if (environment === constants.environments.MOCK) {
                        config.services.customService.urlParams = config.services.customService.url;
                    } else {
                        config.services.customService.urlParams = _basicUrls;
                    }
                }
                this.config = config;
            };
            this.$get = function () {
                this.setEnvironment(constants.environments.MOCK);
                return config;
            };

        }]);
angular
    .module('RDash')
        .service('app.services', ['$http','$q','app.environments',function ($http,$q,environments) {
        	var url = environments.services.customService.url;
            var deferred = $q.defer();
            this.getUserList = function(){
            	$http.get(url.getUserList,{})
            	.success(function(data){
            		console.log(data);
                    if (data.code == 1) {
                        deferred.resolve(data);
                    } else {
                        deferred.reject(data);
                    }
            	})
            	.error(function(error){
            		deferred.reject(error);
            	});

                return deferred.promise;
            };
        }]);